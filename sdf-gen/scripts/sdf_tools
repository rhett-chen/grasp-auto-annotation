#!/usr/bin/env python
import argparse, time, sys
try:
    import cPickle as pickle
except:
    import pickle
import numpy as np
from itertools import izip


class SignedDensityField(object):
    """ Data is stored in the following way
            data[x, y, z]
    """

    def __init__(self, data, origin, delta):
        self.data = data
        self.nx, self.ny, self.nz = data.shape
        self.origin = origin
        self.delta = delta
        self.max_coords = self.origin + delta * np.array(data.shape)

    def _rel_pos_to_idxes(self, rel_pos):
        i_min = np.array([0, 0, 0], dtype=np.int)
        i_max = np.array([self.nx - 1, self.ny - 1, self.nz - 1], dtype=np.int)
        return np.clip(((rel_pos - self.origin) / self.delta).astype(int), i_min, i_max)

    def get_distance(self, rel_pos):
        idxes = self._rel_pos_to_idxes(rel_pos)
        assert idxes.shape[0] == rel_pos.shape[0]
        return self.data[idxes[:, 0], idxes[:, 1], idxes[:, 2]]

    def dump(self, pkl_file):
        data = {}
        data['data'] = self.data
        data['origin'] = self.origin
        data['delta'] = self.delta
        pickle.dump(data, open(pkl_file, "wb"), protocol=2)

    def visualize(self, max_dist=0.1):
        try:
            from mayavi import mlab
        except:
            print "mayavi is not installed!"

        figure = mlab.figure('Signed Density Field')
        SCALE = 100  # The dimensions will be expressed in cm for better visualization.
        data = np.copy(self.data)
        data = np.minimum(max_dist, data)
        xmin, ymin, zmin = SCALE * self.origin
        xmax, ymax, zmax = SCALE * self.max_coords
        delta = SCALE * self.delta
        xi, yi, zi = np.mgrid[xmin:xmax:delta, ymin:ymax:delta, zmin:zmax:delta]
        data[data <= 0] -= 0.2
        data = -data
        grid = mlab.pipeline.scalar_field(xi, yi, zi, data)
        vmin = np.min(data)
        vmax = np.max(data)
        mlab.pipeline.volume(grid, vmin=vmin, vmax=(vmax + vmin) / 2)
        mlab.axes()
        mlab.show()

    @classmethod
    def from_sdf(cls, sdf_file):
        with open(sdf_file, "r") as file:
            axis = 2
            lines = file.readlines()
            nx, ny, nz = map(int, lines[0].split(' '))
            print nx, ny, nz
            x0, y0, z0 = map(float, lines[1].split(' '))
            print x0, y0, z0
            delta = float(lines[2].strip())
            print delta
            data = np.zeros([nx, ny, nz])
            for i, line in enumerate(lines[3:]):
                idx = i % nx
                idy = int(i / nx) % ny
                idz = int(i / (nx * ny))
                val = float(line.strip())
                data[idx, idy, idz] = val

        return cls(data, np.array([x0, y0, z0]), delta)

    @classmethod
    def from_pkl(cls, pkl_file):
        data = pickle.load(open(pkl_file, "r"))

        return cls(data['data'], data['origin'], data['delta'])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--file', '-f', help="Path to .sdf or .pkl file.", required=True)
    parser.add_argument('-v', action='store_true', help="Visualize signed density field.")
    parser.add_argument('--export', '-e', help="Export to a pickle file.")

    args = parser.parse_args()
    filename = args.file
    if filename.endswith('.sdf'):
        sdf = SignedDensityField.from_sdf(filename)
    elif filename.endswith('.pkl'):
        sdf = SignedDensityField.from_pkl(filename)
    else:
        print "File has to be of type .sdf or .pkl!"
        sys.exit(1)
    if args.v:
        sdf.visualize()
    if args.export:
        sdf.dump(args.export)
